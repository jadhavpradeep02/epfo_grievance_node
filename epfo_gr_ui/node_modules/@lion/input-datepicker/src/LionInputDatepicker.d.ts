declare const LionInputDatepicker_base: typeof LionInputDate & import("@open-wc/dedupe-mixin").Constructor<import("@lion/overlays/types/OverlayMixinTypes").OverlayHost> & Pick<typeof import("@lion/overlays/types/OverlayMixinTypes").OverlayHost, "prototype"> & Pick<typeof import("@lion/core").LitElement, "prototype" | "_$litElement$" | "enabledWarnings" | "enableWarning" | "disableWarning" | "addInitializer" | "_initializers" | "elementProperties" | "properties" | "elementStyles" | "styles" | "observedAttributes" | "createProperty" | "shadowRootOptions"> & import("@open-wc/dedupe-mixin").Constructor<import("@lion/overlays/types/ArrowMixinTypes").ArrowHost> & Pick<typeof import("@lion/overlays/types/ArrowMixinTypes").ArrowHost, "prototype" | "properties" | "styles"> & import("@open-wc/dedupe-mixin").Constructor<import("@open-wc/scoped-elements/types/src/types").ScopedElementsHost>;
/**
 * @typedef {import('@lion/core').RenderOptions} RenderOptions
 */
/**
 * @customElement lion-input-datepicker
 */
export class LionInputDatepicker extends LionInputDatepicker_base {
    static get scopedElements(): {
        'lion-calendar': typeof LionCalendar;
        'lion-calendar-overlay-frame': typeof LionCalendarOverlayFrame;
    };
    /**
     * The LionCalendar shouldn't know anything about the modelValue;
     * it can't handle Unparseable dates, but does handle 'undefined'
     * @param {?} modelValue
     * @returns {Date|undefined} a 'guarded' modelValue
     */
    static __getSyncDownValue(modelValue: unknown): Date | undefined;
    /**
     * @protected
     */
    protected get _invokerNode(): HTMLElement;
    /**
     * @type {LionCalendar}
     * @protected
     */
    protected get _calendarNode(): LionCalendar;
    /** @private */
    private __invokerId;
    /** @protected */
    protected _calendarInvokerSlot: string;
    /** @protected */
    protected _focusCentralDateOnCalendarOpen: boolean;
    /** @protected */
    protected _hideOnUserSelect: boolean;
    /** @protected */
    protected _syncOnUserSelect: boolean;
    /** @protected */
    protected _isHandlingCalendarUserInput: boolean;
    __openCalendarOverlay(): Promise<void>;
    /**
     * @param {{ target: { selectedDate: Date }}} opts
     */
    _onCalendarUserSelectedChanged({ target: { selectedDate } }: {
        target: {
            selectedDate: Date;
        };
    }): void;
    /** @private */
    private __createUniqueIdForA11y;
    /** @private */
    private __toggleInvokerDisabled;
    calendarHeading: any;
    /**
     * Defining this overlay as a templates from OverlayMixin
     * this is our source to give as .contentNode to OverlayController.
     * Important: do not change the name of this method.
     * @protected
     */
    protected _overlayTemplate(): import("@lion/core").TemplateResult<1>;
    /**
     * Subclassers can replace this with their custom extension of
     * LionCalendar, like `<my-calendar id="calendar"></my-calendar>`
     */
    _calendarTemplate(): import("@lion/core").TemplateResult<1>;
    /**
     * Subclassers can replace this with their custom extension invoker,
     * like `<my-button><calendar-icon></calendar-icon></my-button>`
     */
    _invokerTemplate(): import("@lion/core").TemplateResult<1>;
    __datepickerBeforeShow: (() => void) | undefined;
    /**
     * Lifecycle callback for subclassers
     * @overridable
     */
    _onCalendarOverlayOpened(): void;
    /**
     * Validators contain the information to synchronize the input with
     * the min, max and enabled dates of the calendar.
     * @param {import('@lion/form-core').Validator[]} validators - errorValidators or warningValidators array
     */
    __syncDisabledDates(validators: import('@lion/form-core').Validator[]): void;
    __calendarMinDate: any;
    __calendarMaxDate: any;
    __calendarDisableDates: any;
    _cachedOverlayContentNode: HTMLElement | undefined;
}
export type RenderOptions = import("@lion/core").RenderOptions;
import { LionInputDate } from "@lion/input-date";
import { LionCalendar } from "@lion/calendar";
import { LionCalendarOverlayFrame } from "./LionCalendarOverlayFrame.js";
export {};
